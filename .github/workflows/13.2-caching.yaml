name: 13.2 - Using Caching

on:
  workflow_dispatch:
    inputs:
      node-version:
          type: choice
          description: Node version
          options: [18.x, 20.x, 21.x]
          default: 20.x

jobs:
  install-deps:
    runs-on: ubuntu-latest
    defaults:
      run:
        # This working directory is applied on all jobs and steps (only on run)
        working-directory: 13-caching/react-app
    outputs:
      # Export cache key for other jobs
      deps-cache-key: ${{ steps.cache-key.outputs.CACHE_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # actions/setup-node@v4.4.0 already implement caching (7 days with same version)
      - name: Setup Node
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ inputs.node-version }}

      - name: Calculate cache key
        id: cache-key
        # It's important to provide the entire path, we can have multiple package-lock.json in our repo. We only want this one!
        run: echo "CACHE_KEY=deps-node-modules-${{ hashFiles('13-caching/react-app/package-lock.json') }}" >> "$GITHUB_OUTPUT"

      - name: Download cached dependencies
        id: cache
        uses: actions/cache@v3
        with:
          # It's important to provide the entire path, since the working-directory option set as default at the job level applies only to run commands.
          path: 13-caching/react-app/node_modules
          key: ${{ steps.cache-key.outputs.CACHE_KEY }}
        
      - name: Install Dependencies
        # Install dependencies only if there is no cache
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci


  linting:
    runs-on: ubuntu-latest
    defaults:
      run:
        # This working directory is applied on all jobs and steps (only on run)
        working-directory: 13-caching/react-app
    needs: 
      # Need install-deps to retrieve the cache key
      - install-deps
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # actions/setup-node@v4.4.0 already implement caching (7 days with same version)
      - name: Setup Node
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ inputs.node-version }}

      - name: Download cached dependencies
        id: cache
        uses: actions/cache@v3
        with:
          # It's important to provide the entire path, since the working-directory option set as default at the job level applies only to run commands.
          path: 13-caching/react-app/node_modules
          key: ${{ needs.install-deps.outputs.deps-cache-key }}

      # No need to "npm ci" here. It is already put in cache in "install-deps" job

      - name: Testing
        run: npm run test

      - name: Linting
        run: echo "Linting..."

  
  build:
    runs-on: ubuntu-latest
    needs:
      # Need install-deps to retrieve the cache key
      - install-deps
    defaults:
      run:
        # This working directory is applied on all jobs and steps (only on run)
        working-directory: 13-caching/react-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # actions/setup-node@v4.4.0 already implement caching (7 days with same version)
      - name: Setup Node
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ inputs.node-version }}

      - name: Download cached dependencies
        id: cache
        uses: actions/cache@v3
        with:
          # It's important to provide the entire path, since the working-directory option set as default at the job level applies only to run commands.
          path: 13-caching/react-app/node_modules
          key: ${{ needs.install-deps.outputs.deps-cache-key }}

      # No need to "npm ci" here. It is already put in cache in "install-deps" job

      - name: Testing
        run: npm run test

      - name: Building
        run: npm run build

      - name: Deploying to nonprod
        run: echo "Deploying to nonprod"


    # There is no step for making the cache.
    # This is normal. 
    # actions/cache@v3 provide an extra step after the end of each jobs that take the content of "actions/cache@v3.path" and put it into a kvp where key = "actions/cache@v3.key"
    # next time we call the cache, it will compare the cached key with key of checkout files.

  
